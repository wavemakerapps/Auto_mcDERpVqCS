/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.auto_mcderpvqcs.db_levelcheck.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.auto_mcderpvqcs.db_levelcheck.Child1;


/**
 * ServiceImpl object for domain model class Child1.
 *
 * @see Child1
 */
@Service("DB_LevelCheck.Child1Service")
@Validated
public class Child1ServiceImpl implements Child1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Child1ServiceImpl.class);


    @Autowired
    @Qualifier("DB_LevelCheck.Child1Dao")
    private WMGenericDao<Child1, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Child1, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "DB_LevelCheckTransactionManager")
    @Override
    public Child1 create(Child1 child1) {
        LOGGER.debug("Creating a new Child1 with information: {}", child1);

        Child1 child1Created = this.wmGenericDao.create(child1);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(child1Created);
    }

    @Transactional(readOnly = true, value = "DB_LevelCheckTransactionManager")
    @Override
    public Child1 getById(Integer child1Id) {
        LOGGER.debug("Finding Child1 by id: {}", child1Id);
        return this.wmGenericDao.findById(child1Id);
    }

    @Transactional(readOnly = true, value = "DB_LevelCheckTransactionManager")
    @Override
    public Child1 findById(Integer child1Id) {
        LOGGER.debug("Finding Child1 by id: {}", child1Id);
        try {
            return this.wmGenericDao.findById(child1Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Child1 found with id: {}", child1Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "DB_LevelCheckTransactionManager")
    @Override
    public List<Child1> findByMultipleIds(List<Integer> child1Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Child1s by ids: {}", child1Ids);

        return this.wmGenericDao.findByMultipleIds(child1Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "DB_LevelCheckTransactionManager")
    @Override
    public Child1 update(Child1 child1) {
        LOGGER.debug("Updating Child1 with information: {}", child1);

        this.wmGenericDao.update(child1);
        this.wmGenericDao.refresh(child1);

        return child1;
    }

    @Transactional(value = "DB_LevelCheckTransactionManager")
    @Override
    public Child1 delete(Integer child1Id) {
        LOGGER.debug("Deleting Child1 with id: {}", child1Id);
        Child1 deleted = this.wmGenericDao.findById(child1Id);
        if (deleted == null) {
            LOGGER.debug("No Child1 found with id: {}", child1Id);
            throw new EntityNotFoundException(String.valueOf(child1Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "DB_LevelCheckTransactionManager")
    @Override
    public void delete(Child1 child1) {
        LOGGER.debug("Deleting Child1 with {}", child1);
        this.wmGenericDao.delete(child1);
    }

    @Transactional(readOnly = true, value = "DB_LevelCheckTransactionManager")
    @Override
    public Page<Child1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Child1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "DB_LevelCheckTransactionManager")
    @Override
    public Page<Child1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Child1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "DB_LevelCheckTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service DB_LevelCheck for table Child1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "DB_LevelCheckTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service DB_LevelCheck for table Child1 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "DB_LevelCheckTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "DB_LevelCheckTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}