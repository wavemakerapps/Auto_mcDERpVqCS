/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.auto_mcderpvqcs.db_levelcheck.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.auto_mcderpvqcs.db_levelcheck.Child2;


/**
 * ServiceImpl object for domain model class Child2.
 *
 * @see Child2
 */
@Service("DB_LevelCheck.Child2Service")
@Validated
public class Child2ServiceImpl implements Child2Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Child2ServiceImpl.class);


    @Autowired
    @Qualifier("DB_LevelCheck.Child2Dao")
    private WMGenericDao<Child2, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Child2, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "DB_LevelCheckTransactionManager")
    @Override
    public Child2 create(Child2 child2) {
        LOGGER.debug("Creating a new Child2 with information: {}", child2);

        Child2 child2Created = this.wmGenericDao.create(child2);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(child2Created);
    }

    @Transactional(readOnly = true, value = "DB_LevelCheckTransactionManager")
    @Override
    public Child2 getById(Integer child2Id) {
        LOGGER.debug("Finding Child2 by id: {}", child2Id);
        return this.wmGenericDao.findById(child2Id);
    }

    @Transactional(readOnly = true, value = "DB_LevelCheckTransactionManager")
    @Override
    public Child2 findById(Integer child2Id) {
        LOGGER.debug("Finding Child2 by id: {}", child2Id);
        try {
            return this.wmGenericDao.findById(child2Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Child2 found with id: {}", child2Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "DB_LevelCheckTransactionManager")
    @Override
    public List<Child2> findByMultipleIds(List<Integer> child2Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Child2s by ids: {}", child2Ids);

        return this.wmGenericDao.findByMultipleIds(child2Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "DB_LevelCheckTransactionManager")
    @Override
    public Child2 update(Child2 child2) {
        LOGGER.debug("Updating Child2 with information: {}", child2);

        this.wmGenericDao.update(child2);
        this.wmGenericDao.refresh(child2);

        return child2;
    }

    @Transactional(value = "DB_LevelCheckTransactionManager")
    @Override
    public Child2 delete(Integer child2Id) {
        LOGGER.debug("Deleting Child2 with id: {}", child2Id);
        Child2 deleted = this.wmGenericDao.findById(child2Id);
        if (deleted == null) {
            LOGGER.debug("No Child2 found with id: {}", child2Id);
            throw new EntityNotFoundException(String.valueOf(child2Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "DB_LevelCheckTransactionManager")
    @Override
    public void delete(Child2 child2) {
        LOGGER.debug("Deleting Child2 with {}", child2);
        this.wmGenericDao.delete(child2);
    }

    @Transactional(readOnly = true, value = "DB_LevelCheckTransactionManager")
    @Override
    public Page<Child2> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Child2s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "DB_LevelCheckTransactionManager")
    @Override
    public Page<Child2> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Child2s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "DB_LevelCheckTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service DB_LevelCheck for table Child2 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "DB_LevelCheckTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service DB_LevelCheck for table Child2 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "DB_LevelCheckTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "DB_LevelCheckTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}