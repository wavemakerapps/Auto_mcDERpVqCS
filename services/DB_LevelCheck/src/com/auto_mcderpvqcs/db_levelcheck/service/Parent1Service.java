/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.auto_mcderpvqcs.db_levelcheck.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.auto_mcderpvqcs.db_levelcheck.Parent1;

/**
 * Service object for domain model class {@link Parent1}.
 */
public interface Parent1Service {

    /**
     * Creates a new Parent1. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Parent1 if any.
     *
     * @param parent1 Details of the Parent1 to be created; value cannot be null.
     * @return The newly created Parent1.
     */
    Parent1 create(@Valid Parent1 parent1);


	/**
     * Returns Parent1 by given id if exists.
     *
     * @param parent1Id The id of the Parent1 to get; value cannot be null.
     * @return Parent1 associated with the given parent1Id.
	 * @throws EntityNotFoundException If no Parent1 is found.
     */
    Parent1 getById(Integer parent1Id);

    /**
     * Find and return the Parent1 by given id if exists, returns null otherwise.
     *
     * @param parent1Id The id of the Parent1 to get; value cannot be null.
     * @return Parent1 associated with the given parent1Id.
     */
    Parent1 findById(Integer parent1Id);

	/**
     * Find and return the list of Parent1s by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param parent1Ids The id's of the Parent1 to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Parent1s associated with the given parent1Ids.
     */
    List<Parent1> findByMultipleIds(List<Integer> parent1Ids, boolean orderedReturn);


    /**
     * Updates the details of an existing Parent1. It replaces all fields of the existing Parent1 with the given parent1.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Parent1 if any.
     *
     * @param parent1 The details of the Parent1 to be updated; value cannot be null.
     * @return The updated Parent1.
     * @throws EntityNotFoundException if no Parent1 is found with given input.
     */
    Parent1 update(@Valid Parent1 parent1);

    /**
     * Deletes an existing Parent1 with the given id.
     *
     * @param parent1Id The id of the Parent1 to be deleted; value cannot be null.
     * @return The deleted Parent1.
     * @throws EntityNotFoundException if no Parent1 found with the given id.
     */
    Parent1 delete(Integer parent1Id);

    /**
     * Deletes an existing Parent1 with the given object.
     *
     * @param parent1 The instance of the Parent1 to be deleted; value cannot be null.
     */
    void delete(Parent1 parent1);

    /**
     * Find all Parent1s matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Parent1s.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Parent1> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Parent1s matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Parent1s.
     *
     * @see Pageable
     * @see Page
     */
    Page<Parent1> findAll(String query, Pageable pageable);

    /**
     * Exports all Parent1s matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Parent1s matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Parent1s in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Parent1.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}