/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.auto_mcderpvqcs.db_levelcheck.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.auto_mcderpvqcs.db_levelcheck.VirutalTable;
import com.auto_mcderpvqcs.db_levelcheck.VirutalTableId;

/**
 * Service object for domain model class {@link VirutalTable}.
 */
public interface VirutalTableService {

    /**
     * Creates a new VirutalTable. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VirutalTable if any.
     *
     * @param virutalTable Details of the VirutalTable to be created; value cannot be null.
     * @return The newly created VirutalTable.
     */
    VirutalTable create(@Valid VirutalTable virutalTable);


	/**
     * Returns VirutalTable by given id if exists.
     *
     * @param virutaltableId The id of the VirutalTable to get; value cannot be null.
     * @return VirutalTable associated with the given virutaltableId.
	 * @throws EntityNotFoundException If no VirutalTable is found.
     */
    VirutalTable getById(VirutalTableId virutaltableId);

    /**
     * Find and return the VirutalTable by given id if exists, returns null otherwise.
     *
     * @param virutaltableId The id of the VirutalTable to get; value cannot be null.
     * @return VirutalTable associated with the given virutaltableId.
     */
    VirutalTable findById(VirutalTableId virutaltableId);

	/**
     * Find and return the list of VirutalTables by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param virutaltableIds The id's of the VirutalTable to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return VirutalTables associated with the given virutaltableIds.
     */
    List<VirutalTable> findByMultipleIds(List<VirutalTableId> virutaltableIds, boolean orderedReturn);


    /**
     * Updates the details of an existing VirutalTable. It replaces all fields of the existing VirutalTable with the given virutalTable.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VirutalTable if any.
     *
     * @param virutalTable The details of the VirutalTable to be updated; value cannot be null.
     * @return The updated VirutalTable.
     * @throws EntityNotFoundException if no VirutalTable is found with given input.
     */
    VirutalTable update(@Valid VirutalTable virutalTable);

    /**
     * Deletes an existing VirutalTable with the given id.
     *
     * @param virutaltableId The id of the VirutalTable to be deleted; value cannot be null.
     * @return The deleted VirutalTable.
     * @throws EntityNotFoundException if no VirutalTable found with the given id.
     */
    VirutalTable delete(VirutalTableId virutaltableId);

    /**
     * Deletes an existing VirutalTable with the given object.
     *
     * @param virutalTable The instance of the VirutalTable to be deleted; value cannot be null.
     */
    void delete(VirutalTable virutalTable);

    /**
     * Find all VirutalTables matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VirutalTables.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<VirutalTable> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all VirutalTables matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VirutalTables.
     *
     * @see Pageable
     * @see Page
     */
    Page<VirutalTable> findAll(String query, Pageable pageable);

    /**
     * Exports all VirutalTables matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all VirutalTables matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the VirutalTables in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the VirutalTable.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}