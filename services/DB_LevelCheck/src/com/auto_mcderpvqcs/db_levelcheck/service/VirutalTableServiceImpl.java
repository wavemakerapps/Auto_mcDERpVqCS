/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.auto_mcderpvqcs.db_levelcheck.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.auto_mcderpvqcs.db_levelcheck.VirutalTable;
import com.auto_mcderpvqcs.db_levelcheck.VirutalTableId;


/**
 * ServiceImpl object for domain model class VirutalTable.
 *
 * @see VirutalTable
 */
@Service("DB_LevelCheck.VirutalTableService")
@Validated
public class VirutalTableServiceImpl implements VirutalTableService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VirutalTableServiceImpl.class);


    @Autowired
    @Qualifier("DB_LevelCheck.VirutalTableDao")
    private WMGenericDao<VirutalTable, VirutalTableId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<VirutalTable, VirutalTableId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "DB_LevelCheckTransactionManager")
    @Override
    public VirutalTable create(VirutalTable virutalTable) {
        LOGGER.debug("Creating a new VirutalTable with information: {}", virutalTable);

        VirutalTable virutalTableCreated = this.wmGenericDao.create(virutalTable);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(virutalTableCreated);
    }

    @Transactional(readOnly = true, value = "DB_LevelCheckTransactionManager")
    @Override
    public VirutalTable getById(VirutalTableId virutaltableId) {
        LOGGER.debug("Finding VirutalTable by id: {}", virutaltableId);
        return this.wmGenericDao.findById(virutaltableId);
    }

    @Transactional(readOnly = true, value = "DB_LevelCheckTransactionManager")
    @Override
    public VirutalTable findById(VirutalTableId virutaltableId) {
        LOGGER.debug("Finding VirutalTable by id: {}", virutaltableId);
        try {
            return this.wmGenericDao.findById(virutaltableId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VirutalTable found with id: {}", virutaltableId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "DB_LevelCheckTransactionManager")
    @Override
    public List<VirutalTable> findByMultipleIds(List<VirutalTableId> virutaltableIds, boolean orderedReturn) {
        LOGGER.debug("Finding VirutalTables by ids: {}", virutaltableIds);

        return this.wmGenericDao.findByMultipleIds(virutaltableIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "DB_LevelCheckTransactionManager")
    @Override
    public VirutalTable update(VirutalTable virutalTable) {
        LOGGER.debug("Updating VirutalTable with information: {}", virutalTable);

        this.wmGenericDao.update(virutalTable);
        this.wmGenericDao.refresh(virutalTable);

        return virutalTable;
    }

    @Transactional(value = "DB_LevelCheckTransactionManager")
    @Override
    public VirutalTable delete(VirutalTableId virutaltableId) {
        LOGGER.debug("Deleting VirutalTable with id: {}", virutaltableId);
        VirutalTable deleted = this.wmGenericDao.findById(virutaltableId);
        if (deleted == null) {
            LOGGER.debug("No VirutalTable found with id: {}", virutaltableId);
            throw new EntityNotFoundException(String.valueOf(virutaltableId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "DB_LevelCheckTransactionManager")
    @Override
    public void delete(VirutalTable virutalTable) {
        LOGGER.debug("Deleting VirutalTable with {}", virutalTable);
        this.wmGenericDao.delete(virutalTable);
    }

    @Transactional(readOnly = true, value = "DB_LevelCheckTransactionManager")
    @Override
    public Page<VirutalTable> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VirutalTables");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "DB_LevelCheckTransactionManager")
    @Override
    public Page<VirutalTable> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VirutalTables");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "DB_LevelCheckTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service DB_LevelCheck for table VirutalTable to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "DB_LevelCheckTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service DB_LevelCheck for table VirutalTable to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "DB_LevelCheckTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "DB_LevelCheckTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}